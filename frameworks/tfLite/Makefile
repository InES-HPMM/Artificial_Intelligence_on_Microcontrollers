##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.1.0] date: [Tue Jun 04 09:19:18 CEST 2019] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = TFLIT


######################################
# building variables
######################################
# debug build?
DEBUG = 1

# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/stm32f4xx_it.c \
Src/stm32f4xx_hal_msp.c \
Src/system_stm32f4xx.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c \

SRCS = \
tensorflow/lite/micro/examples/mnist/main.cc \
tensorflow/lite/micro/micro_utils.cc \
tensorflow/lite/micro/micro_error_reporter.cc \
tensorflow/lite/micro/micro_mutable_op_resolver.cc \
tensorflow/lite/micro/debug_log.cc \
tensorflow/lite/micro/debug_log_numbers.cc \
tensorflow/lite/micro/micro_interpreter.cc \
tensorflow/lite/micro/micro_allocator.cc \
tensorflow/lite/micro/kernels/all_ops_resolver.cc \
tensorflow/lite/micro/kernels/softmax.cc \
tensorflow/lite/micro/kernels/fully_connected.cc \
tensorflow/lite/micro/kernels/quantize.cc \
tensorflow/lite/micro/kernels/dequantize.cc \
tensorflow/lite/micro/kernels/elementwise.cc \
tensorflow/lite/micro/kernels/logical.cc \
tensorflow/lite/micro/kernels/pooling.cc \
tensorflow/lite/micro/kernels/depthwise_conv.cc \
tensorflow/lite/core/api/error_reporter.cc \
tensorflow/lite/core/api/flatbuffer_conversions.cc \
tensorflow/lite/core/api/op_resolver.cc \
tensorflow/lite/core/api/tensor_utils.cc \
tensorflow/lite/kernels/kernel_util.cc \
tensorflow/lite/kernels/internal/quantization_util.cc \
tensorflow/lite/micro/examples/mnist/model_settings.cc \
tensorflow/lite/micro/examples/mnist/model_data.cc \
tensorflow/lite/micro/simple_memory_allocator.cc \
tensorflow/lite/micro/memory_helpers.cc \
tensorflow/lite/micro/memory_planner/greedy_memory_planner.cc \
tensorflow/lite/c/common.c \

# rest of ops
# tensorflow/lite/micro/kernels/depthwise_conv.cc \
# tensorflow/lite/micro/kernels/pooling.cc \
# tensorflow/lite/micro/kernels/logistic.cc \
# tensorflow/lite/micro/kernels/svdf.cc \
# tensorflow/lite/micro/kernels/conv.cc \
# tensorflow/lite/micro/kernels/prelu.cc \
# tensorflow/lite/micro/kernels/softmax.cc \
# tensorflow/lite/micro/kernels/floor.cc \
# tensorflow/lite/micro/kernels/maximum_minimum.cc \
# tensorflow/lite/micro/kernels/concatenation.cc \
# tensorflow/lite/micro/kernels/arg_min_max.cc \
# tensorflow/lite/micro/kernels/logical.cc \
# tensorflow/lite/micro/kernels/reshape.cc \
# tensorflow/lite/micro/kernels/elementwise.cc \
# tensorflow/lite/micro/kernels/ceil.cc \
# tensorflow/lite/micro/kernels/comparisons.cc \
# tensorflow/lite/micro/kernels/round.cc \
# tensorflow/lite/micro/kernels/strided_slice.cc \
# tensorflow/lite/micro/kernels/pack.cc \
# tensorflow/lite/micro/kernels/unpack.cc \
# tensorflow/lite/micro/kernels/pad.cc \
# tensorflow/lite/micro/kernels/split.cc \
# tensorflow/lite/micro/kernels/neg.cc \
# tensorflow/lite/micro/kernels/add.cc \
# tensorflow/lite/micro/kernels/mul.cc \

OBJS := \
$(patsubst %.cc,%.o,$(patsubst %.c,%.o,$(SRCS)))

# ASM sources
ASM_SOURCES =  \
startup_stm32f407xx.s

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
AS = $(PREFIX)g++ -x assembler-with-cpp
CC = $(PREFIX)g++
CXX = $(PREFIX)g++
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F407xx \

# C includes
C_INCLUDES =  \
-I. \
-IInc \
-IDrivers/STM32F4xx_HAL_Driver/Inc \
-IDrivers/CMSIS/DSP/Include \
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IDrivers/CMSIS/Include \
-Ithird_party/gemmlowp \
-Ithird_party/flatbuffers/include \
-Itensorflow/lite/c \
-Ithird_party/eigen3

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
CXXFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -DNDEBUG --std=c++11 -fpermissive

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F407VGTx_FLASH.ld

# libraries
LIBS = -lm -lc
LDFLAGS = $(MCU) -specs=nosys.specs -T$(LDSCRIPT) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex

#######################################
# build the application
#######################################
# list of c objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

# list of cc objects
OBJECTS += $(patsubst %.cc,%.o,$(patsubst %.c,%.o,$(SRCS)))
vpath %.cc $(sort $(dir $(SRCS)))

# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/%.o: %.cc Makefile | $(BUILD_DIR) 
	$(CXX) -c $(CXXFLAGS) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(ASFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CXX) $(LDFLAGS) $(OBJECTS) -o $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

$(BUILD_DIR):
	mkdir $@

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR) 
	-find . -type f -name '*.o' -exec rm {} +
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
